<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create

//image -------------------------------------------------------------------------------------
image_speed = 0;
image_index = 0;    //wearing sword

//declarar variables    ------------------------------------------------------------------------

global.player_width = (global.unit / 2);  //guarda el tamaño del sprite de player
global.player_height = global.unit;

player_dir = 0;                 //guarda hacia donde se mueve player
player_front = 1;               //guarda hacia donde esta encarado player

// en un futuro la posicion de obj_sword_light en la mano de pj deberia de ir moviendose con la animacion del pj
sword = true;                   //indica si el pj tiene la espada o no (true false)
grab = true;                   //Guarda si player puede "coger" cosas
action_range = global.unit/2;     //la distanciua a la q el personaje puede interactuar con objetos
nearest_item_icon = 0;          //guarda en todo momento que obj debe mostrar un icono de interaccion
hand = 0;                       //guarda lo q lleva player en la mano en terminos de 1, 2, 3...(scepto sword)
hand_holding = false            //estado que le comunica a "nearest item" q no se ve afectado por la gravedad

hsp = 0;     //Horizontal speed  global. 
vsp = 0;     //vertical speed  global
movespeed = global.unit_per_sec * 2;   //numero de units q se mueve por segundo 
// 0.5333333333333333 * global.unit;      //"units" per step (en este caso 16/30)
//cambiar velocidad para q sea un numero redondo

//posicion -----------------------------------------------------------------------------

x = global.unit * 6 ;
y = global.unit * 5.5;

//crear objetos asociados----------------------------------------------------------------

//Crea Player HAnd, objeto invisible q sigue la mano de la animacion de player
//sirve para situar el objeto recogido por player en su mano en todo momento
instance_create((x+(player_front*(global.player_width))), y, obj_hand);

//iluiminacion
//esto se cambiara por un script de iluminacion
instance_create(0, 0, obj_player_light_substract);





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///step

//Key Setting---------------------------------------------------------------------------

//implementar un sistema de "cambiar key setting" en un "menu"

key_left = vk_left;     //move left
key_right = vk_right;   //move right
key_sprint = 0;         //keep pressed to sprint
key_action = vk_space;  //interact or grab button
key_sword = 0;          //use the sword
key_leave_sword = vk_backspace;     //this puts the sword on the ground
//"leave_sword" deberia ser reimplementdado para usar menos teclas, por ejemplo, manteniendo "action"

//player input---------------------------------------------------------------------

press_right = keyboard_check(key_right);
press_left = - keyboard_check(key_left);
press_action = keyboard_check_pressed(key_action);
press_leave_sword = keyboard_check_pressed(key_leave_sword);


//react to imput--------------------------------------------------------------------------

move = press_left + press_right;
player_dir = sign(move);    //direccion de movimiento de player. Cuando esta parado, es 0 (se usa en el paralax)
hsp = move * movespeed ;
scr_grav();



//el sprite gira cuando player se mueve a la izq o a la derecha
if (player_dir == -1)   //izquierda
{
    image_xscale = -1;
    player_front = -1;
}

if (player_dir == 1)    //derecha
{
    image_xscale = 1;
    player_front = 1;
}

//colisiones    -------------------------------------------------------------------


scr_collision();

x += hsp;
y += vsp;

//Nearest Item  -----------------------------------------------------------------

//sistema que busca constantemente la instance mas cercana de los items con los que se puede interactuar

nearest_water = instance_nearest(x, y, obj_water);  //la fuente de agua mas cercana
near_water_distance = abs(nearest_water.x - x)      //distancia player-agua mas cercana
nearest_plant = instance_nearest(x, y, obj_plant);  //planta mas cercana
near_plant_distance = abs(nearest_plant.x - x)      //distancia player-agua mas cercana

if(near_plant_distance &lt;= near_water_distance)
{
    nearest_item = nearest_plant;
}
else
{
    if (near_plant_distance &lt;= action_range)    //da prioridad a la planta frente al agua en caso de q ambos esten dentro del action range
    {
        nearest_item = nearest_plant;
    }
    else
    {
        nearest_item = nearest_water;
    }
}

//Sword &amp; Grab  --------------------------------------------------------------------



//Showing "action icon"

//action_range es un rango alrededor de Player dentro del cual es posible la interaccion con obj como Water, Plant o Sword
//utilizo "nearest_item_icon diferente de 0" para determinar cuando player puede recoger obj
if ((abs(nearest_item.x - x)) &lt;= action_range) &amp;&amp; (grab == true)
{
    nearest_item_icon = nearest_item;
    instance_create(nearest_item.x, ((nearest_item.y)-(global.unit/2)), obj_action_icon);
}
else
{
    if (instance_exists(obj_sword)) &amp;&amp; ((abs(obj_sword.x - x)) &lt;= action_range) &amp;&amp; (grab == true)
    {
        nearest_item_icon = obj_sword;
        instance_create(obj_sword.x, ((obj_sword.y)-(global.unit/2)), obj_action_icon);
    }
    else nearest_item_icon = 0;
}

//Sword
if (sword == true)
{
    if (press_leave_sword == true)
    {
        image_index = 1;
        instance_create((x+(player_front*(global.unit/2))), y, obj_sword);  //deja sword delante de player
        //el aura de luz del jugador cambia
        sword = false;
        grab = true;
    }
}

//Grab

//INVESTIGAR.  El icono no aparece hasta que se ha soltado la espada por primera vez.
//             y tras coger objeto con espada en mano, el icono deja de aparecer
//Es posible que no exista boton para dejar objeto en el suelo?

if (nearest_item_icon != 0) &amp;&amp; (grab == true) &amp;&amp; (press_action = true)    //pressiona Action
{
    if (nearest_item_icon == nearest_item)    //se muestra el icono sobre un obj
    {     
        if (sword == true)  //al coger algo con la espada en la mano, se suelta la espada detras de Player
        {
            image_index = 1;
            //TO DO: el aura de luz del jugador cambia
            instance_create((x+((global.unit/2)*(player_front*(-1)))), y, obj_sword);   //deja sword detras de player
            hand_holding = true;
            sword = false; 
            /*           
            //añadir un "if statement" mas tarde para hand holding
            nearest_item.x = obj_hand.x;
            nearest_item.y = obj_hand.y;
            nearest_item.vsp = 0;
            */
            grab = false;
        }
        if (sword == false)
        {
            grab = false;
            hand_holding = true
        }        
    }
    if (nearest_item_icon == obj_sword)
    {
        sword = true;
        hand_holding = false;
        image_index = 0;
        instance_destroy(obj_sword);
    }
}

if (grab == false) &amp;&amp; (press_action = true) &amp;&amp; (hand_holding == true) &amp;&amp; (sword == 0)   //pressiona Action
{
    //hand_holding = false;
    hand_holding = true;
    grab = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
